// Generated by CoffeeScript 1.6.3
var $, assert, data, fs, util, writejson, xQuery;

util = require('util');

fs = require('fs');

xQuery = require('../lib/htmlparser-query');

$ = xQuery.$;

assert = require('assert');

writejson = function(path, obj) {
  var ss;
  ss = util.inspect(obj, {
    showHidden: true,
    depth: null
  });
  return fs.writeFile(path, ss, function(err) {
    if (err) {
      throw err;
    }
    return console.log('write fin!');
  });
};

data = "<div class=\"cc\">\n    <ul>\n        <li><a href=\"xxxx\" title=\"title\">title end</a></li>\n        <li><a href=\"xxxx\" title=\"title_x\">title_x</a></li>\n        <li><a href=\"xxxx\" title=\"x_title\">x_title</a></li>\n        <li><a href=\"xxxx\" title=\"x_ss_x\">x_ss_x</a></li>\n    </ul>\n</div>\n<div class=\"clear\">  </div>\n<div class=\"cc\">\n    <ul>\n        <li><a href=\"xxxx\">asdsadsa</a></li>\n        <li><a href=\"xxxx\">asdsadsa</a></li>\n        <li><a href=\"xxxx\">asdsadsa</a></li>\n    </ul>\n</div>\n<div class=\"iter\">\n    <p>p1</p>\n    <p>p1</p>\n    <p>p1</p>\n</div>";

(function() {
  var dd, e, gg, x, _i, _len, _ref, _results;
  dd = xQuery.load(data);
  writejson('./d1.json', dd.elms);
  gg = function(slt) {
    return dd.find(slt);
  };
  x = gg('.cc');
  assert(x.size() === 2);
  x = gg('div li');
  assert(x.size() === 7);
  x = gg('a[title=title]');
  assert(x.size() === 1);
  assert(x.text() === 'title end');
  x = gg('a[title!=title]');
  assert(x.size() === 3);
  x = gg('[title^=title]');
  assert(x.size() === 1);
  x = gg('[title$=title]');
  assert(x.size() === 1);
  x = gg('[title*=title]');
  assert(x.size() === 2);
  x = gg('a[title^=title]');
  assert(x.size() === 1);
  x = gg('a[title$=title]');
  assert(x.size() === 1);
  x = gg('a[title*=title]');
  assert(x.size() === 2);
  _ref = x.gg('p');
  _results = [];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    e = _ref[_i];
    _results.push(assert($(e).text() === "p1"));
  }
  return _results;
})();

fs.readFile('./index.html', {
  encoding: 'utf-8'
}, function(err, data) {
  var dd, gg, x;
  dd = xQuery.load(data);
  gg = function(slt) {
    return dd.find(slt);
  };
  writejson('./index.json', dd.elms);
  x = gg('#navbg1btn_ont');
  assert(x.size() === 1);
  x = gg('h2');
  assert(x.size() === 3);
  x = gg('.cartoon_online_border');
  assert(x.size() === 2);
  x = gg('div.cartoon_online_border');
  assert(x.size() === 2);
  x = gg('div.cartoon_online_border li');
  assert(x.size() === 203);
  x = gg('div.cartoon_online_border a[title]');
  return assert(x.size() === 203);
});
