// Generated by CoffeeScript 1.6.3
var f, func, k, util,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

util = require('util');

func = {};

func._reg = {
  id: /^#([\w-]+)$/,
  "class": /^\.([\w-]+)$/,
  tag: /^(\w+)$/,
  attr: /^\[([\w-]+)([\^\$\*!]?=?)([\w-]*)\]$/,
  tag$cls: /^(\w+)\.([\w-]+)$/,
  tag$attr: /^(\w+)\[(\w+)([\^\$\*!]?=?)(\w*)\]$/,
  tag$cls$attr: /^(\w+)\.([\w-]+)\[(\w+)([\^\$\*!]?=?)(\w*)\]$/
};

func.id = function(name) {
  return func.attr('id', '=', name);
};

func.tag = function(name) {
  var ff;
  ff = function(node) {
    return node.type === 'tag' && node.name === name;
  };
  return ff;
};

func["class"] = function(name) {
  var ff;
  ff = function(node) {
    var has;
    has = node.type === 'tag' && node.attribs && node.attribs["class"];
    if (has) {
      return __indexOf.call(node.attribs["class"].split(' '), name) >= 0;
    }
  };
  return ff;
};

func.attr = function(name, op, val) {
  var ff;
  ff = function(node) {
    var has, v;
    has = node.type === 'tag' && node.attribs && node.attribs[name];
    if (has) {
      v = node.attribs[name];
      if (op === '=') {
        return v === val;
      }
      if (op === '!=') {
        return v !== val;
      }
      if (op === '^=') {
        return v !== val && v.slice(0, +(val.length - 1) + 1 || 9e9) === val;
      }
      if (op === '$=') {
        return v !== val && v.slice(0 - val.length) === val;
      }
      if (op === '*=') {
        return v !== val && v.indexOf(val) > -1;
      }
    }
    return Boolean(has);
  };
  return ff;
};

for (k in func) {
  f = func[k];
  exports[k] = f;
}
