// Generated by CoffeeScript 1.6.3
var func, htmlparser, util, xQuery, _ref, _refp;

util = require('util');

htmlparser = require('htmlparser');

func = require('./builtin-func');

_refp = function(nodes, filter, i, result) {
  var f, one, val, _i, _len, _results;
  _results = [];
  for (_i = 0, _len = nodes.length; _i < _len; _i++) {
    one = nodes[_i];
    val = util.isArray(filter[i]) ? ((function() {
      var _j, _len1, _ref, _results1;
      _ref = filter[i];
      _results1 = [];
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        f = _ref[_j];
        _results1.push(f(one));
      }
      return _results1;
    })()).every(function(e) {
      return e;
    }) : filter[i](one);
    if (true === val && i + 1 === filter.length) {
      result.push(one);
      continue;
    }
    if (true === val && i + 1 < filter.length) {
      if (one.children != null) {
        _refp(one.children, filter, i + 1, result);
      }
      continue;
    }
    if (one.children != null) {
      _results.push(_refp(one.children, filter, i, result));
    } else {
      _results.push(void 0);
    }
  }
  return _results;
};

_ref = function(nodes, filter, result) {
  var f, one, val, _i, _len, _results;
  _results = [];
  for (_i = 0, _len = nodes.length; _i < _len; _i++) {
    one = nodes[_i];
    val = util.isArray(filter) ? ((function() {
      var _j, _len1, _results1;
      _results1 = [];
      for (_j = 0, _len1 = filter.length; _j < _len1; _j++) {
        f = filter[_j];
        _results1.push(f(one));
      }
      return _results1;
    })()).every(function(e) {
      return e;
    }) : filter(one);
    if (true === val) {
      result.push(one);
      continue;
    } else {
      if (one.children != null) {
        _results.push(_ref(one.children, filter, result));
      } else {
        _results.push(void 0);
      }
    }
  }
  return _results;
};

xQuery = (function() {
  xQuery.load = function(raw) {
    var handler, parser;
    handler = new htmlparser.DefaultHandler(function(error, dom) {
      if (error) {

      }
    });
    parser = new htmlparser.Parser(handler);
    parser.parseComplete(raw);
    return new xQuery(handler.dom);
  };

  function xQuery(elms) {
    var e, i, _i, _len, _ref1;
    this.elms = util.isArray(elms) ? elms : [elms];
    this.length = this.elms.length;
    _ref1 = this.elms;
    for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
      e = _ref1[i];
      this[i] = e;
    }
  }

  xQuery.prototype.findf = function(q) {
    var result;
    result = [];
    _ref(this.elms, q, result);
    return new xQuery(result);
  };

  xQuery.prototype.findfs = function(qs) {
    var result;
    result = [];
    _refp(this.elms, qs, 0, result);
    return new xQuery(result);
  };

  xQuery.prototype.find = function(selector) {
    var doms, k, m, mch, qs, r, rr, ss, _i, _len, _ref1;
    rr = func._reg;
    qs = [];
    doms = this.elms;
    _ref1 = selector.split(' ');
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      ss = _ref1[_i];
      mch = {};
      for (k in rr) {
        r = rr[k];
        mch[k] = r.exec(ss);
      }
      switch (false) {
        case !(m = mch.id):
          qs.push(func.id(m[1]));
          break;
        case !(m = mch["class"]):
          qs.push(func["class"](m[1]));
          break;
        case !(m = mch.tag):
          qs.push(func.tag(m[1]));
          break;
        case !(m = mch.attr):
          qs.push(func.attr(m[1], m[2], m[3]));
          break;
        case !(m = mch.tag$cls):
          qs.push([func.tag(m[1]), func["class"](m[2])]);
          break;
        case !(m = mch.tag$attr):
          qs.push([func.tag(m[1]), func.attr(m[2], m[3], m[4])]);
          break;
        case !(m = mch.tag$cls$attr):
          qs.push([func.tag(m[1]), func["class"](m[2]), func.attr(m[3], m[4], m[5])]);
          break;
        default:
          throw new Error('not support selector ' + ss);
      }
    }
    if (qs.length === 1) {
      return this.findf(qs[0]);
    } else {
      return this.findfs(qs);
    }
  };

  return xQuery;

})();

xQuery.prototype.raw = function() {
  var a;
  return (function() {
    var _i, _len, _ref1, _results;
    _ref1 = this.elms;
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      a = _ref1[_i];
      _results.push(a.raw);
    }
    return _results;
  }).call(this);
};

xQuery.prototype.size = function() {
  return this.length;
};

xQuery.prototype.text = function() {
  var a, ff, result;
  ff = function(node) {
    return node.type === 'text';
  };
  result = this.findf(ff);
  return ((function() {
    var _i, _len, _ref1, _results;
    _ref1 = result.elms;
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      a = _ref1[_i];
      _results.push(a.data.trim());
    }
    return _results;
  })()).join('');
};

xQuery.prototype.attr = function(name) {
  var ff, node, _i, _len, _ref1;
  ff = func.attr(name, '', '');
  _ref1 = this.elms;
  for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
    node = _ref1[_i];
    if (ff(node) === true) {
      return node.attribs[name];
    }
  }
  return null;
};

xQuery.prototype.attrs = function(name) {
  var ff, node, _i, _len, _ref1;
  ff = func.attr(name, '', '');
  _ref1 = this.elms;
  for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
    node = _ref1[_i];
    if (ff(node) === true) {
      return node.attribs[name];
    }
  }
};

exports.load = xQuery.load;

exports.$ = function(node) {
  return new xQuery(node);
};

exports.xQuery = xQuery;
